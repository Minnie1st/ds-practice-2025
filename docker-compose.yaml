services:
  frontend:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      dockerfile: ./frontend/Dockerfile
    ports:
      # Expose port 8080 on the host, and map port 80 of the container to port 8080 on the host
      # Access the application at http://localhost:8080
      - "8080:80"
    volumes:
      # Mount the frontend directory
      - ./frontend/src:/usr/share/nginx/html
  orchestrator:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the orchestrator directory
      dockerfile: ./orchestrator/Dockerfile
    ports:
      # Expose port 8081 on the host, and map port 5000 of the container to port 8081 on the host
      - 8081:5000
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the orchestrator directory to see how this is used
      - PYTHONFILE=/app/orchestrator/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the orchestrator/src directory in the current directory to the /app/orchestrator/src directory in the container
      - ./orchestrator/src:/app/orchestrator/src
    depends_on:
      - fraud_detection
      - transaction_verification
      - suggestions
      - order_queue
    networks:
    - app-network  


  database_1:
    build:
      context: .  
      dockerfile: ./database/Dockerfile
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/database/src/app.py
      - REPLICA_ID=1
      - PORT=50061
    ports:
      - "50061:50061"
    networks:
      - app-network

  database_2:
    build:
      context: .  
      dockerfile: ./database/Dockerfile
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/database/src/app.py
      - REPLICA_ID=2
      - PORT=50062
    ports:
      - "50062:50062"
    networks:
      - app-network

  database_3:
    build:
      context: .  
      dockerfile: ./database/Dockerfile
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/database/src/app.py
      - REPLICA_ID=3
      - PORT=50063
    ports:
      - "50063:50063"
    networks:
      - app-network


  fraud_detection:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./fraud_detection/Dockerfile
    ports:
      # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
      - 50051:50051
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/fraud_detection/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./fraud_detection/src:/app/fraud_detection/src
      - ./fraud_detection/.env:/app/fraud_detection/.env
    env_file:
      - ./fraud_detection/.env
    networks:
    - app-network  
  
  transaction_verification:
    build:
      context: ./
      dockerfile: ./transaction_verification/Dockerfile
    ports:
      - "50052:50052"  # 映射到任务要求的端口 50052
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/transaction_verification/src/app.py
    volumes:
      - ./utils:/app/utils
      - ./transaction_verification/src:/app/transaction_verification/src
    networks:
    - app-network  

  suggestions:
    build:
      context: ./
      dockerfile: ./suggestions/Dockerfile
    ports:
      - "50053:50053"  # 映射到任务要求的端口 50053
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/suggestions/src/app.py
    volumes:
      - ./utils:/app/utils
      - ./suggestions/src:/app/suggestions/src
      - ./suggestions/.env:/app/suggestions/.env
    env_file:
      - ./suggestions/.env
    networks:
    - app-network  

  order_queue:
    build:
      context: .  # 根目录
      dockerfile: order_queue/Dockerfile
    ports:
      - "50054:50054"
    environment:
      - PYTHONUNBUFFERED=TRUE  # 确保日志实时输出
      - PYTHONFILE=/app/order_queue/src/app.py  # 指定入口文件
      # - GEMINI_API_KEY=your-api-key-here  # 可选：直接设置密钥（不推荐）
    volumes:
      - ./utils:/app/utils  # 挂载 gRPC 文件
      - ./order_queue/src:/app/order_queue/src  # 挂载源码
      - ./order_queue/.env:/app/order_queue/.env  # 挂载 .env 文件
    env_file:
      - ./order_queue/.env  # 加载环境变量
    networks:
      - app-network

  order_executor_1:
    depends_on:
      - order_queue
      - observability
    build:
      context: .
      dockerfile: order_executor/Dockerfile
    environment:
      - REPLICA_ID=1
      - PORT=50055
    ports:
      - "50055:50055"
    networks:
      - app-network

  order_executor_2:
    depends_on:
      - order_queue
      - observability
    build:
      context: .
      dockerfile: order_executor/Dockerfile
    environment:
      - REPLICA_ID=2
      - PORT=50056
    ports:
      - "50056:50056"
    networks:
      - app-network

  order_executor_3:
    depends_on:
      - order_queue
      - observability
    build:
      context: .
      dockerfile: order_executor/Dockerfile
    environment:
      - REPLICA_ID=3
      - PORT=50057
    ports:
      - "50057:50057"
    networks:
      - app-network

  order_executor_4:
    depends_on:
      - order_queue
      - observability
    build:
      context: .
      dockerfile: order_executor/Dockerfile
    environment:
      - REPLICA_ID=4
      - PORT=50058
    ports:
      - "50058:50058"
    networks:
      - app-network

  payment_service:
    depends_on:
      - observability
    build:
      context: .
      dockerfile: payment_service/Dockerfile
    environment:
      - PORT=50064
    ports:
      - "50064:50064"
    networks:
      - app-network

  observability:
    image: grafana/otel-lgtm
    ports:
      - "3000:3000"   # Grafana UI
      - "4317:4317"   # OTLP gRPC endpoint
      - "4318:4318"   # OTLP HTTP endpoint
    environment:
      - OTEL_METRIC_EXPORT_INTERVAL=1000
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

  